{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\React\\\\react-practice\\\\src\\\\PixabeyApp\\\\ImageResults.js\";\nimport { Dialog, IconButton } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { GridList, GridTile } from 'material-ui';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ImageResults extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      currentImg: ''\n    };\n\n    this.handleOpen = img => {\n      this.setState({\n        open: true,\n        currentImg: img\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n  }\n\n  render() {\n    let imageListContent;\n    const {\n      images\n    } = this.props;\n\n    if (images) {\n      imageListContent = /*#__PURE__*/_jsxDEV(GridList, {\n        cols: 3,\n        children: images.map(img => /*#__PURE__*/_jsxDEV(GridTile, {\n          title: img.tags,\n          subtitle: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"by \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: img.user\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 36\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 29\n          }, this),\n          actionIcon: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => this.handleOpen(img.largeImageURL),\n            children: /*#__PURE__*/_jsxDEV(ZoomIn, {\n              color: \"white\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 29\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: img.largeImageURL\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this)\n        }, img.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this);\n    } else {\n      imageListContent = n;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [imageListContent, /*#__PURE__*/_jsxDEV(Dialog, {\n        actions: actions,\n        modal: false,\n        open: this.state.open,\n        onRequestClose: this.handleClose,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: this.state.currentImg,\n          style: {\n            width: '100%'\n          },\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nImageResults.propTypes = {\n  images: PropTypes.array.isRequired\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/React/react-practice/src/PixabeyApp/ImageResults.js"],"names":["Dialog","IconButton","React","Component","PropTypes","GridList","GridTile","ImageResults","state","open","currentImg","handleOpen","img","setState","handleClose","render","imageListContent","images","props","map","tags","user","largeImageURL","id","n","actions","width","propTypes","array","isRequired"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,UAAjB,QAAmC,mBAAnC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,aAAnC;;AAEA,eAAe,MAAMC,YAAN,SAA2BJ,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAChDK,KADgD,GACxC;AACJC,MAAAA,IAAI,EAAE,KADF;AAEJC,MAAAA,UAAU,EAAC;AAFP,KADwC;;AAAA,SAKhDC,UALgD,GAKnCC,GAAG,IAAI;AAChB,WAAKC,QAAL,CAAc;AAACJ,QAAAA,IAAI,EAAC,IAAN;AAAWC,QAAAA,UAAU,EAACE;AAAtB,OAAd;AACH,KAP+C;;AAAA,SAQhDE,WARgD,GAQlC,MAAI;AACd,WAAKD,QAAL,CAAc;AAACJ,QAAAA,IAAI,EAAC;AAAN,OAAd;AACH,KAV+C;AAAA;;AAYhDM,EAAAA,MAAM,GAAG;AACL,QAAIC,gBAAJ;AACA,UAAM;AAACC,MAAAA;AAAD,QAAW,KAAKC,KAAtB;;AAEA,QAAGD,MAAH,EAAU;AACND,MAAAA,gBAAgB,gBACZ,QAAC,QAAD;AAAU,QAAA,IAAI,EAAE,CAAhB;AAAA,kBACKC,MAAM,CAACE,GAAP,CAAWP,GAAG,iBACX,QAAC,QAAD;AACA,UAAA,KAAK,EAAEA,GAAG,CAACQ,IADX;AAGA,UAAA,QAAQ,eACJ;AAAA,2CACO;AAAA,wBAASR,GAAG,CAACS;AAAb;AAAA;AAAA;AAAA;AAAA,oBADP;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAQA,UAAA,UAAU,eACN,QAAC,UAAD;AAAY,YAAA,OAAO,EAAE,MAAI,KAAKV,UAAL,CAAgBC,GAAG,CAACU,aAApB,CAAzB;AAAA,mCACI,QAAC,MAAD;AAAQ,cAAA,KAAK,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBATJ;AAAA,iCAcA;AAAK,YAAA,GAAG,EAAEV,GAAG,CAACU;AAAd;AAAA;AAAA;AAAA;AAAA;AAdA,WAEKV,GAAG,CAACW,EAFT;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAsBH,KAvBD,MAuBK;AACDP,MAAAA,gBAAgB,GAAGQ,CAAnB;AACH;;AACD,wBACI;AAAA,iBACKR,gBADL,eAEI,QAAC,MAAD;AACA,QAAA,OAAO,EAAES,OADT;AAEA,QAAA,KAAK,EAAE,KAFP;AAGA,QAAA,IAAI,EAAE,KAAKjB,KAAL,CAAWC,IAHjB;AAIA,QAAA,cAAc,EAAE,KAAKK,WAJrB;AAAA,+BAKI;AAAK,UAAA,GAAG,EAAE,KAAKN,KAAL,CAAWE,UAArB;AAAiC,UAAA,KAAK,EAAE;AAACgB,YAAAA,KAAK,EAAC;AAAP,WAAxC;AAAwD,UAAA,GAAG,EAAC;AAA5D;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAYH;;AAtD+C;AAyDpDnB,YAAY,CAACoB,SAAb,GAAyB;AACrBV,EAAAA,MAAM,EAACb,SAAS,CAACwB,KAAV,CAAgBC;AADF,CAAzB","sourcesContent":["import { Dialog, IconButton } from '@material-ui/core'\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { GridList, GridTile } from 'material-ui';\r\n\r\nexport default class ImageResults extends Component {\r\n    state = {\r\n        open :false,\r\n        currentImg:''\r\n    };\r\n    handleOpen = img => {\r\n        this.setState({open:true,currentImg:img});\r\n    };\r\n    handleClose = ()=>{\r\n        this.setState({open:false})\r\n    }\r\n\r\n    render() {\r\n        let imageListContent;\r\n        const {images} = this.props;\r\n\r\n        if(images){\r\n            imageListContent = (\r\n                <GridList cols={3}>\r\n                    {images.map(img=>(\r\n                        <GridTile\r\n                        title={img.tags}\r\n                        key={img.id}\r\n                        subtitle={\r\n                            <span>\r\n                                by <strong>{img.user}</strong>\r\n                            </span>\r\n                        }\r\n                        actionIcon={\r\n                            <IconButton onClick={()=>this.handleOpen(img.largeImageURL)}>\r\n                                <ZoomIn color=\"white\"/>\r\n                            </IconButton>\r\n                        }\r\n                    >\r\n                        <img src={img.largeImageURL} />\r\n                    </GridTile>\r\n                    ))}\r\n                </GridList>\r\n            );\r\n        }else{\r\n            imageListContent = n\r\n        }\r\n        return (\r\n            <div>\r\n                {imageListContent}\r\n                <Dialog \r\n                actions={actions}\r\n                modal={false}\r\n                open={this.state.open}\r\n                onRequestClose={this.handleClose}>\r\n                    <img src={this.state.currentImg} style={{width:'100%'}} alt=\"\"/>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nImageResults.propTypes = {\r\n    images:PropTypes.array.isRequired\r\n}"]},"metadata":{},"sourceType":"module"}